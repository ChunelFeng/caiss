#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1082] =
    {   0,
        0,    0,  155,  155,    2,    2,  159,  157,    4,    4,
      157,  157,  147,  153,  147,  147,  150,  147,  147,  147,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  147,  155,  156,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  142,    0,    1,  150,
      149,  148,  144,  143,  141,  145,  152,  152,  152,  152,

      152,  152,  120,  152,  121,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  122,
      152,  152,  123,  124,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  125,  126,  127,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  128,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  146,  155,  154,    2,    2,
        2,    2,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      151,  148,  108,  152,  109,  152,  152,  110,  152,  111,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  132,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  112,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  113,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  114,  152,  152,
      115,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  116,  152,  152,  117,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  118,  152,
      152,  152,  152,  152,  152,  152,  152,  119,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  152,  152,  152,  152,  152,  152,  152,   78,

      152,   79,   41,   80,  152,  152,  152,   81,  152,  152,
       82,  152,  152,  152,  152,   84,  152,  152,  152,   85,
       86,  152,  152,  152,  152,  152,  152,  152,   87,  152,
      152,   88,   89,  152,  152,   90,  152,   91,  131,  152,
      152,  152,  152,  152,  152,   92,  152,   93,   94,   95,
      152,   97,  152,   98,  152,  152,  152,  152,   99,  152,
      152,  152,  152,  152,  100,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  101,  152,  152,  152,  152,  102,
      103,  104,  152,  135,  152,  152,  152,  152,  152,  152,
      152,  152,  105,  152,  106,  152,  107,  134,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,   58,   59,  152,   60,  152,  138,
      152,  152,  152,  152,  152,  152,   61,  152,  152,  152,
      152,   62,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  136,   63,  152,  152,   64,  152,   96,  152,
       65,   66,  152,  152,  152,  152,   67,   68,   69,   70,
      152,  133,  152,  152,  152,   71,   72,  152,  152,  152,
      152,  152,   73,  152,  152,  152,  152,  152,  152,   74,
      152,  152,  152,  152,   75,  152,  152,  152,   76,  152,
      152,  152,   77,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  152,   31,  152,  152,   32,  140,  152,   33,
      152,  152,  152,   34,  152,   35,  152,   36,   37,   38,
      152,   39,  152,  152,   42,   43,   44,   45,   46,  152,
      152,   47,  130,  152,  152,   48,  152,  152,  152,   49,

      152,  152,   50,  129,   51,   52,  152,   53,  152,  152,
      152,  152,   54,   55,   56,   57,  152,  152,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   15,   16,   17,   18,   19,  152,
      152,   20,  152,  152,   21,   22,   40,   23,  152,   24,
      152,  152,   25,   26,  152,  152,   27,   28,  152,  152,

      152,  152,   29,   30,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,   83,  152,   10,   11,  152,   12,
      152,   13,  139,  152,  152,  152,   14,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      152,    7,  152,    8,    9,  152,    2,    2,    2,    2,
        2,    2,    5,    6,  152,    2,    2,    2,  137,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1089] =
    {   0,
        0,    0,  422,  414,   67,    0,  410, 4309,  133,  135,
      368,    0, 4309, 4309,  131,  345,  133,  132,  312,  300,
      129,  129,  137,  135,  145,  196,  171,  184,  188,  124,
      141,  183,  228,  230,  236,  235,    0,  250,  280,  323,
      257,  194,  231,  144,  243,    0,  297,    0,  259,  272,
      276,  276,    0,    0,  161,  259,  293,  294,  247,  224,
      381,  448,  502,  554,  602,  654,  301,  377,  702,  302,
      304,  379,  440,  754,  802,  449,  358,  453,  852,  904,
      499,  524,  553,  366,  164,  312, 4309,  221, 4309,  308,
      212,  209, 4309, 4309, 4309, 4309,    0,  147,  267,  296,

      317,  302,  322,  450,    0,  318,  338,  552,  391,  439,
      596,  406,  341,  386,  384,  403,  457,  641,  451,  454,
      454,  453,  464,  487,  493,  494,  492,  498,  495,    0,
      510,  505,  691,  509,  544,  532,  561,  560,  608,  556,
      563,  569,  583,  592,  601,  617,  614,    0,  621,  611,
      615,  636,  665,  637,  655,  653,  659,  700,  676,  680,
      703,  707,  700,  712,  706,  707,  732,  749,  725,  736,
      745,  759,  757,  745,  765, 4309,    0, 4309,    0,  360,
        0,  212,    0,  364,  193,  190,    0,    0,    0,    0,
      762,  793,  790,  824,  847,  794,  856,  891,  806,  895,

      905,  953,  930,  939, 1005,  955,  956,  984,  896, 1009,
     1017, 1067, 1007, 1023, 1048, 1049, 1053, 1059, 1081, 1097,
     1099, 1102, 1115,  993, 1121, 1112, 1170, 1127, 1133, 1083,
     1155, 1181, 1195, 1210, 1224, 1225, 1221, 1238, 1239, 1247,
     1172, 1151, 1255, 1249, 1277, 1283, 1288, 1298, 1293, 1309,
     1311, 1344, 1347, 1333, 1352, 1365, 1368, 1350, 1382, 1393,
     1405, 1419, 1407, 1418, 1444, 1442, 1416, 1441, 1474,    0,
     4309,  145,    0,  768,    0,  769,  766,    0,  812,    0,
      838,  853,  841,  853, 1460,  848,  869,  913,  932,  938,
      967,  951,  970,    0,  964, 1022, 1161, 1026, 1047, 1046,

     1080, 1156, 1186,    0, 1209, 1229, 1237, 1264, 1292, 1287,
     1287, 1354, 1387, 1400, 1451, 1465, 1476, 1460, 1474, 1475,
     1465, 1468, 1484, 1482, 1493, 1495, 1496, 1505, 1482, 1500,
        0, 1495, 1511, 1508, 1514, 1518, 1514, 1516, 1508, 1511,
     1511,    0, 1521, 1516, 1516, 1531, 1533, 1538, 1526, 1533,
     1538, 1551, 1533, 1546, 1543, 1552, 1549, 1563,    0, 1546,
     1550, 1551, 1560, 1557, 1554, 1561, 1572,    0, 1569, 1580,
     1571, 1572, 1588, 1576, 1571, 1590, 1580, 1585, 1593, 1598,
     1590,    0,  140, 1604, 1617, 1618, 1619, 1634, 1620, 1636,
     1622, 1650, 1653, 1658, 1655, 1692, 1686, 1688, 1701, 1696,

     1671, 1724, 1732, 1710, 1722, 1754, 1745, 1740, 1758, 1750,
     1775, 1789, 1780, 1776, 1784, 1810, 1794, 1826, 1815, 1825,
     1834, 1844, 1828, 1843, 1860, 1869, 1879, 1897, 1882, 1900,
     1888, 1918, 1923, 1922, 1931, 1912, 1934, 1937, 1946, 1971,
     1976, 1952, 1962, 1974, 1986, 2008, 2019, 2000, 2024, 2016,
     2010, 2038, 2040, 2041, 2049, 2050, 2072, 2073, 2078, 2086,
     2083, 2082, 2084, 2108, 2112, 2127, 2116, 2138, 2124, 2126,
     2149, 2137, 2162, 2180, 2170, 2168, 2192, 2166, 2178, 2202,
     2221, 2206, 2224, 2235, 2247, 2250, 2265, 2260, 2264, 2289,
     2300, 2288, 1608, 1639, 1746, 1818, 1827, 1840, 1878,    0,

     1887,    0,    0,    0, 1876, 1936, 1935,    0, 1938, 1981,
     2099, 2111, 2156, 2217, 2246, 2233, 2256, 2268, 2279,    0,
        0, 2284, 2285, 2288, 2295, 2318, 2321, 2318,    0, 2304,
     2325,    0,    0, 2328, 2315,    0, 2323,    0,    0, 2333,
     2321, 2319, 2326, 2327, 2341,    0, 2335,    0,    0,    0,
     2334,    0, 2343,    0, 2352, 2341, 2354, 2345,    0, 2364,
     2363, 2351, 2355, 2363,    0, 2376, 2377, 2366, 2362, 2363,
     2383, 2378, 2378, 2390,    0, 2392, 2389, 2394, 2386,    0,
        0, 2383, 2389,    0, 2406, 2397, 2392, 2413, 2395, 2409,
     2412, 2413,    0, 2401,    0, 2418,    0,    0, 2427, 2428,

     2422, 2426, 2450, 2451, 2432, 2456, 2461, 2462, 2465, 2466,
     2491, 2496, 2494, 2495, 2504, 2525, 2517, 2528, 2520, 2550,
     2533, 2558, 2576, 2579, 2561, 2573, 2582, 2604, 2607, 2612,
     2621, 2617, 2647, 2630, 2633, 2646, 2656, 2638, 2662, 2675,
     2681, 2684, 2687, 2686, 2690, 2700, 2705, 2716, 2726, 2729,
     2738, 2721, 2750, 2744, 2754, 2755, 2772, 2759, 2783, 2780,
     2788, 2798, 2821, 2796, 2811, 2822, 2826, 2837, 2852, 2854,
     2855, 2860, 2870, 2878, 2891, 2888, 2909, 2912, 2914, 2924,
     2926, 2928, 2954, 2937, 2942, 2940, 2943, 2966, 2968, 2945,
     2978, 2991, 2994, 3006, 2997, 3020, 2996, 3028, 3030, 3036,

     3034, 3042, 3045, 3046,    0,    0, 2509,    0, 2584,    0,
     2587, 2590, 2613, 2657, 2687, 2805,    0, 2830, 2834, 2860,
     2900,    0, 2973, 2993, 3023, 3051, 3060, 3049, 3053, 3056,
     3067, 3076,    0,    0, 3061, 3073,    0, 3080,    0, 3069,
        0,    0, 3070, 3086, 3074, 3083,    0,    0,    0,    0,
     3094,    0, 3100, 3096, 3085,    0,    0, 3102, 3091, 3092,
     3106, 3104,    0, 3114, 3118, 3117, 3103, 3120, 3124, 3108,
     3111, 3110, 3132, 3134,    0, 3134, 3137, 3138,    0, 3125,
     3144, 3146,    0, 3144, 3148, 3153, 3150, 3156, 3158, 3159,
     3182, 3184, 3172, 3207, 3196, 3198, 3222, 3228, 3230, 3212,

     3213, 3247, 3241, 3262, 3246, 3252, 3270, 3276, 3281, 3280,
     3304, 3286, 3305, 3315, 3314, 3316, 3338, 3319, 3344, 3349,
     3350, 3353, 3354, 3378, 3382, 3379, 3383, 3384, 3387, 3388,
     3393, 3421, 3433, 3412, 3418, 3422, 3423, 3451, 3461, 3446,
     3452, 3455, 3489, 3490, 3477, 3500, 3506, 3511, 3521, 3530,
     3525, 3555, 3560, 3467, 3519, 3564, 3549, 3554, 3559, 3565,
     3593, 3594, 3162,    0, 3179, 3194, 3222,    0, 3303,    0,
     3312, 3347, 3442,    0, 3498,    0, 3498,    0,    0,    0,
     3544,    0, 3586, 3582,    0,    0,    0,    0,    0, 3585,
     3599,    0,    0, 3596, 3608,    0, 3590, 3608, 3589,    0,

     3612, 3617, 3603,    0,    0,    0, 3611,    0, 3623, 3627,
     3629, 3613,    0,    0,    0,    0, 3616, 3626, 3638, 3639,
     3643, 3647, 3648, 3649, 3657, 3651, 3653, 3683, 3672, 3682,
     3715, 3693, 3707, 3697, 3701, 3706, 3711, 3716, 3737, 3741,
     3725, 3747, 3749, 3750, 3751, 3766, 3755, 3760, 3765, 3801,
     3795, 3789, 3790, 3799, 3800, 3803, 3831, 3840, 3825, 3814,
     3843, 3844, 3855, 3849, 3857, 3883, 3888, 3885, 3854, 3894,
     3897, 3898, 3909, 3919,    0,    0,    0,    0,    0, 3868,
     3897,    0, 3907, 3896,    0,    0,    0,    0, 3918,    0,
     3910, 3928,    0,    0, 3916, 3927,    0,    0, 3924, 3932,

     3927, 3947,    0,    0, 3948, 3951, 3952, 3957, 3961, 3962,
     3963, 3965, 3973, 3976, 3987, 3997, 4001, 4002, 4013, 4005,
     4026, 4015, 4016, 4027, 4030, 4031, 4041, 4055, 4056, 4059,
     4065, 4070, 4071, 4081,    0, 4069,    0,    0, 4072,    0,
     4076,    0,    0, 4073, 4084, 4095,    0, 4104, 4110, 4109,
     4113, 4119, 4115, 4145, 4121, 4123, 4127, 4144, 4149, 4159,
     4105,    0, 4149,    0,    0, 4157, 4173, 4175, 4183, 4178,
     4181, 4189,    0,    0, 4168, 4187, 4211, 4212,    0, 4213,
     4309, 4278, 4283,  135, 4288, 4293, 4298, 4303
    } ;

static const flex_int16_t yy_def[1089] =
    {   0,
     1081,    1, 1082, 1082, 1081,    5, 1081, 1081, 1081, 1081,
     1081, 1083, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1081, 1085, 1081, 1086, 1086, 1081,
     1086, 1087, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1088, 1088,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1086, 1081, 1081, 1083, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1081, 1085, 1081, 1086, 1086,
     1086, 1087, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62, 1086,
     1081, 1081, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1086, 1086,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,

     1084, 1084, 1084, 1084,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1084, 1084, 1084, 1084, 1084, 1084,   62,   62,   62,   62,
       62,   62, 1084, 1084, 1084,   62,   62,   62, 1084,   62,
        0, 1081, 1081, 1081, 1081, 1081, 1081, 1081
    } ;

static const flex_int16_t yy_nxt[4377] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  110,  383,
      106,  135,  111,  100,  272,  101,  112,  107,  136,  102,
      103,  175,  113,  273,  108,  114,  105,  109,  183,  115,
      184,  116,   98,  104,   99,  110,  117,  106,  135,  111,
      100,  118,  101,  112,  107,  136,  102,  103,  175,  113,
      273,  108,  114,  105,  109,  125,  115,  127,  116,  383,

      137,  126,  185,  117,  138,  128,  130,  171,  118,  119,
      139,  129,  131,  132,  133,  172,  382,  120,  272,  134,
      121,   91,  125,  122,  127,  271,  123,  137,  126,  124,
      270,  138,  128,  130,  171,  190,  119,  139,  129,  131,
      132,  133,  172,  143,  120,  140,  134,  121,  151,  141,
      122,  173,  174,  123,  147,  142,  124,  144,  189,  152,
      180,   86,  148,  145,  146,  153,  149,  154,  185,  150,
      143,  155,  140,   86,   86,  151,  141,  156,  173,  174,
      179,  147,  142,  168,  144,  169,  152,  181,  170,  148,
      145,  146,  153,  149,  154,  157,  150,  158,  155,  274,

      159,  186,  184,  178,  156,  187,  188,  160,  161,  176,
      168,   96,  169,   86,   86,  170,   92,   90,  191,  191,
      275,  230,  157,   95,  158,  219,  274,  159,  276,  229,
      277,  220,  279,  278,  160,  161,  162,  280,  191,  191,
      163,  191,  284,  164,  165,  191,  191,  275,  230,  285,
      166,  286,  219,  167,   91,  276,  229,  277,  220,  279,
      278,  180,   86,  162,  280,  191,  191,  163,  191,  284,
      164,  165,  186,  184,  301,  191,  285,  166,  286,   87,
      167,  179,  179,  269,  179,  179,  179,  179,  179,  179,
      221,  179,  179,  179,  191,  191,  231,  192,  222,  193,

      232,  301,  191,  191,  223,  194,  233,  195,  291, 1081,
      269,  196,  197,  302,  191,  303,  191,  221,  292,  304,
       47,  191,  191,  231,  192,  222,  193,  232,   47, 1081,
      191,  223,  194,  233,  195,  291,  299,  300,  196,  197,
      302,  191,  303,  191, 1081,  292,  304,  179,  179,  179,
     1081,  179,  179,  179,  179,  179,  179,  234,  179,  179,
      179,  235,  245,  299,  300,  198,  191,  236,  281,  282,
      248,  293,  305,  246,  249,  311,  294,  191,  312,  247,
      250,  313,  283,  314,  234,  199,  191, 1081,  235,  245,
      191,  315,  198,  191,  236,  281,  282,  248,  293,  305,

      246,  249,  311,  294,  191,  312,  247,  250,  313,  283,
      314,  316,  199,  191,  179,  200,  191,  191,  315,  191,
      317,  318,  201,  319,  321,  262,  320,  263,  322,  202,
      264,  323,  203,  324, 1081,  329,  191,  265,  316,  191,
     1081,  191,  200,  191, 1081,  266,  191,  317,  318,  201,
      319,  321,  262,  320,  263,  322,  202,  264,  323,  203,
      324,  191,  329,  191,  265,  330,  191,  204,  191,  331,
      191,  205,  266,  267,  268,  206,  287,  288,  289,  332,
      290,  207, 1081,  333,  208,  334,  338, 1081,  191,  339,
      191,  191,  330, 1081,  204,  340,  331,  191,  205, 1081,

      267,  268,  206,  287,  288,  289,  332,  290,  207,  295,
      333,  208,  334,  338,  296,  341,  339,  191,  191,  191,
      297,  335,  340,  336,  342,  343,  209,  298,  210, 1081,
      344, 1081,  345,  211,  337, 1081,  295,  346,  212,  191,
     1081,  296,  341,  347, 1081,  348,  191,  297,  335,  349,
      336,  342,  343,  209,  298,  210,  306,  344,  307,  345,
      211,  337,  308,  352,  346,  212,  191,  213,  353,  309,
      347,  191,  348,  310,  354,  214,  349,  355,  215,  356,
     1081,  216,  350,  306,  217,  307,  351,  218, 1081,  308,
      352,  191, 1081, 1081,  213,  353,  309, 1081,  191, 1081,

      310,  354,  214,  360,  355,  215,  356,  325,  216,  350,
      361,  217, 1081,  351,  218,  357,  362,  326,  191,  191,
      224,  363,  327,  328,  358,  364,  225,  226,  227,  366,
      360,  367,  359,  228,  325,  368,  365,  361, 1081,  191,
     1081,  373,  357,  362,  326,  369,  191,  224,  363,  327,
      328,  358,  364,  225,  226,  227,  366,  374,  367,  359,
      228, 1081,  368,  365, 1081,  370,  191,  237,  373,  375,
      371,  191,  369,  372,  379,  376,  377,  380,  381,  191,
     1081,  238, 1081, 1081,  374,  493,  494,  239,  240,  378,
      495,  191,  370, 1081,  237, 1081,  375,  371,  191,  191,

      372,  379,  376,  377,  380,  381,  191,  191,  238,  384,
      191,  191,  493,  494,  239,  240,  378,  495,  191,  191,
      241, 1081,  385,  191,  390,  496,  191,  191,  242, 1081,
      191,  191,  243, 1081,  191,  244,  384,  191,  191,  191,
     1081,  191, 1081,  191, 1081, 1081,  191,  241,  386,  385,
      191,  390,  496, 1081,  191,  242,  387,  191,  191,  243,
      388,  191,  244,  389,  191,  497,  191,  251,  191,  252,
      191,  391,  253,  191,  498,  386,  499,  500,  504,  254,
      255, 1081, 1081,  387,  191, 1081, 1081,  388,  191,  191,
      389,  191,  497,  191,  251, 1081,  252, 1081,  391,  253,

      191,  498,  505,  499,  500,  504,  254,  255,  191,  392,
      393,  191,  191,  191, 1081, 1081,  191,  256,  397,  395,
      191,  257,  191,  394,  258,  259,  396,  414,  191,  505,
     1081,  260,  191,  191,  261,  191,  392,  393,  506,  191,
      191,  191,  191, 1081,  256,  397,  395,  402,  257,  191,
      394,  258,  259,  396,  414,  191,  191,  403,  260,  191,
      191,  261, 1081, 1081,  507,  506, 1081,  191,  191,  191,
      191,  404,  191,  191,  402,  508,  405,  398,  399,  400,
      509,  401,  510,  191,  403,  410,  411,  511,  512,  412,
      191,  507,  191,  191,  191, 1081, 1081,  191,  404,  191,

      191,  191,  508,  405,  398,  399,  400,  509,  401,  510,
      191,  413,  410,  411,  511,  512,  412,  191,  406,  191,
      191,  191,  191,  407,  191,  415,  191, 1081,  191,  408,
      191,  422,  416, 1081,  191,  513,  409,  191,  413, 1081,
      191,  516,  191, 1081,  191,  406,  191,  423,  191,  191,
      407,  191,  415,  191,  191, 1081,  408,  191,  422,  416,
      191,  191,  513,  409,  517,  191,  191,  191,  516,  191,
      191,  191, 1081,  191,  423,  424,  191, 1081,  518,  425,
      426,  191,  417,  427,  418,  191,  191,  191,  419, 1081,
      191,  517,  191,  191,  519,  420,  191,  191,  191,  421,

      191, 1081,  424,  191,  191,  518,  425,  426,  428,  417,
      427,  418,  191,  191,  191,  419,  191,  191,  191,  191,
      442,  519,  420,  191,  429,  191,  421,  191,  432,  191,
      430,  191,  191,  431,  191,  428,  191, 1081,  191,  191,
      435,  191,  434,  191,  191,  191,  191,  442,  433,  191,
      191,  429,  191,  440,  441,  432,  191,  430,  191,  191,
      431,  191, 1081,  191,  191,  191,  191,  435,  191,  434,
      191,  191,  191,  443, 1081,  433,  191,  191,  514,  191,
      440,  441, 1081, 1081,  520,  191,  436,  191,  191,  191,
      456,  191,  191,  515, 1081,  191,  437,  191,  191,  191,

      443,  438,  439,  521,  444,  514,  445,  191,  446,  191,
      447,  520,  191,  436,  191,  191,  191,  456,  191,  191,
      515,  448,  522,  437, 1081,  191, 1081,  191,  438,  439,
      521,  444,  191,  445,  191,  446,  191,  447,  191,  191,
      449,  191,  191, 1081, 1081,  191,  523,  191,  448,  522,
      450,  451,  524,  452,  191,  191,  191, 1081,  191,  191,
      455,  191,  191,  454,  191,  191,  191,  449,  191,  191,
      453,  457,  191,  523,  191,  191,  191,  450,  451,  524,
      452,  458,  191,  191,  191,  191,  191,  455,  191,  191,
      454,  191,  191,  191,  191,  525,  460,  453,  457,  191,

      191, 1081,  191,  191, 1081,  461, 1081,  459,  458,  462,
      191,  191,  465,  191,  191,  191,  526,  527,  528,  191,
      191,  191,  525,  460,  463,  191,  191,  191,  191,  464,
      191,  467,  461,  466,  459,  191,  462,  191, 1081,  465,
     1081,  191,  191,  526,  527,  528,  191,  191,  191, 1081,
      191,  463,  191,  191, 1081,  191,  464,  191,  467,  468,
      466,  191,  191,  472,  191,  473, 1081,  477,  469,  191,
      191,  529, 1081,  191,  471,  191,  470,  191, 1081,  474,
     1081,  191,  191, 1081,  191,  191,  468,  191,  191,  191,
      472,  191,  473,  475,  477,  469,  191,  191,  529,  191,

      530,  471,  191,  470,  476,  191,  474,  478,  191,  191,
      191,  191,  191, 1081,  191, 1081,  191, 1081,  480,  191,
      475,  479,  191,  484,  191,  531,  191,  530, 1081,  191,
      191,  476,  191,  490,  478,  191,  191,  191,  481,  485,
      482, 1081,  191,  483,  191,  480,  191, 1081,  479,  191,
      484,  191,  531,  191, 1081,  191,  191,  191,  191,  488,
      490,  191,  191,  191, 1081,  481,  485,  482,  486,  191,
      483,  191,  489,  491,  487,  501,  532,  502,  191,  191,
      191,  191,  191,  191, 1081,  191,  488,  492,  191,  533,
      534,  191,  503,  535,  536,  486,  537,  538,  539,  489,

      491,  487,  501,  532,  502,  191,  191,  540,  191,  541,
      542,  191,  543,  544,  492,  547,  533,  534,  191,  503,
      535,  536,  545,  537,  538,  539,  548,  549,  550,  551,
      552,  553,  546,  554,  540,  555,  541,  542,  191,  543,
      544,  556,  547,  557,  558,  559,  560,  561,  562,  545,
      563,  564,  565,  548,  549,  550,  551,  552,  553,  546,
      554,  566,  555,  567,  568,  569,  570,  571,  556,  572,
      557,  558,  559,  560,  561,  562,  573,  563,  564,  565,
      574,  575,  576,  577,  578,  579,  580,  581,  566,  582,
      567,  568,  569,  570,  571,  583,  572,  584,  586,  588,

      587,  589,  590,  573,  591,  592,  585,  574,  575,  576,
      577,  578,  579,  580,  581,  593,  582,  594,  597,  595,
      598,  191,  583,  596,  584,  586,  588,  587,  589,  590,
     1081,  591,  592,  585,  599,  191,  600,  191,  705,  191,
     1081,  191,  593, 1081,  594,  597,  595,  598,  191,  602,
      596,  191, 1081,  191,  191,  191,  191,  191,  601,  191,
     1081,  599,  191,  600,  191,  705,  191,  191,  191,  706,
      191,  191,  191,  191,  604,  191,  602,  603,  191,  606,
      191,  191,  191,  191,  191,  601,  191,  191,  191, 1081,
      191, 1081,  191,  605,  191,  191,  706,  191,  191,  191,

      191,  604,  191,  191,  603,  191,  606,  607,  614,  608,
     1081, 1081, 1081,  191,  191,  191,  610,  191,  191,  191,
      605,  611,  191,  191,  609,  191,  612,  617,  613,  191,
      191, 1081,  191,  191,  607,  614,  608,  615,  191,  191,
      191,  191, 1081,  610, 1081,  191, 1081,  191,  611,  191,
      191,  609,  191,  612,  617,  613,  191,  620,  619,  191,
      191,  191,  191,  616,  615,  191,  191,  623,  191,  191,
     1081,  191,  621,  622,  191,  191,  191,  191,  618, 1081,
     1081, 1081,  191,  707,  620,  619,  191,  191,  191,  191,
      616,  191,  191,  627,  623,  191,  191,  191,  191,  621,

      622,  191,  191,  625,  191,  618,  191,  624,  626,  191,
      707,  629,  191,  191,  191, 1081, 1081,  191,  191,  191,
      627,  191,  191,  628,  191, 1081,  191,  191,  191, 1081,
      625,  191,  191,  191,  624,  626, 1081, 1081,  629,  191,
      191,  630,  191,  191,  191,  635,  631,  191,  191,  632,
      628,  191,  191,  191,  191,  708,  636,  709,  191,  191,
      191,  191,  191,  191,  633,  191,  710, 1081,  630,  191,
      191,  191,  635,  631,  191,  634,  632,  191,  191,  191,
      191,  191,  708,  636,  709,  637,  191,  191,  191,  191,
      191,  633,  191,  710,  638,  711,  191,  191,  191,  191,

      712,  713,  634,  639,  191,  191,  191,  191,  191,  643,
     1081,  640,  637,  191,  191,  641,  191,  191, 1081,  191,
      642,  638,  711,  191,  191,  191,  191,  712,  713,  648,
      639, 1081,  191,  191,  191,  191,  643,  191,  640,  191,
      191,  191,  641,  191,  191,  646,  191,  642,  191,  191,
      644,  649,  191,  645,  650,  191,  648,  714,  647,  191,
      191,  191,  191,  651,  191,  715,  191,  191,  191,  191,
      716,  191,  646,  652,  191,  191,  191,  644,  649,  191,
      645,  650,  191,  191,  714,  647,  191,  191,  191,  191,
      651,  656,  715,  191,  655,  191,  191,  716,  191,  191,

      652,  191,  654,  191,  653, 1081,  191,  657,  191, 1081,
      191,  191,  717,  191, 1081,  191,  191,  191,  656,  660,
      191,  655, 1081,  191,  658,  191,  191,  191, 1081,  654,
      191,  653,  659,  191,  657,  191,  191,  191,  191,  717,
      191,  191,  663,  661,  191,  191,  660,  191, 1081,  662,
      191,  658,  191,  191,  191,  191,  191,  191,  191,  659,
      191,  191, 1081,  191,  191,  665,  191,  191,  191,  663,
      661,  664,  191, 1081,  191,  191,  662,  191,  191,  666,
      191,  667,  191,  191,  191,  191,  191,  191,  191,  668,
      669,  670,  665,  191,  191,  191, 1081,  674,  664,  191,

      191,  191,  191,  191,  191,  191,  666,  673,  667,  191,
      191,  672,  671,  191,  191,  191,  668,  669,  670,  191,
      191,  191,  191,  191,  674,  191,  191,  191,  191,  191,
      191,  718,  676,  678,  673,  719,  191,  191,  672,  671,
      675,  680,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  677,  191,  191,  191,  191,  191, 1081,  718,  676,
      678,  191,  719,  191,  191,  679,  191,  675,  680,  682,
      191,  191,  191, 1081,  191,  191,  191, 1081,  677,  191,
      191,  191,  191,  688,  681,  191,  191,  191,  191,  720,
      191,  191,  679,  191,  683,  191,  682,  191,  685,  191,

      686,  191,  191,  191,  684,  191,  191,  191, 1081,  191,
      688,  681,  191,  191,  191,  191,  720,  191,  687,  191,
     1081,  683,  191,  191,  191,  685,  191,  686,  689,  191,
      191,  684,  191,  692,  191,  693,  191, 1081,  690,  191,
     1081,  191,  191,  191,  191,  687,  191,  691,  695,  721,
      191,  694,  191, 1081, 1081,  689,  191, 1081,  191,  722,
      692,  191,  693,  723,  191,  690,  191,  191,  191, 1081,
      191,  724,  191,  696,  691,  695,  721,  191,  694,  191,
      698,  191,  191,  697,  191,  191,  722,  191,  191,  725,
      723,  191, 1081, 1081,  191,  699,  700,  191,  724,  191,

      696,  191,  191,  726,  191,  191,  191,  698,  191,  191,
      697,  191,  727,  728,  191,  701,  725,  191,  704,  702,
      703,  729,  699,  700,  191,  191,  191,  730,  191,  191,
      726,  731,  191,  191,  732,  733,  734,  191,  735,  727,
      728,  736,  701,  737,  191,  704,  702,  703,  729,  738,
      739,  740,  191,  191,  730,  741,  742,  743,  731,  746,
      744,  732,  733,  734,  191,  735,  747,  748,  736,  749,
      737,  745,  750,  751,  752,  753,  738,  739,  740,  754,
      755,  756,  741,  742,  743,  757,  746,  744,  758,  759,
      760,  761,  762,  747,  748,  763,  749,  764,  745,  750,

      751,  752,  753,  765,  766,  767,  754,  755,  756,  768,
      769,  770,  757,  771,  772,  758,  759,  760,  761,  762,
      773,  774,  763,  775,  764,  776,  777,  778,  779,  780,
      765,  766,  767,  781,  782,  783,  768,  769,  770,  191,
      771,  772, 1081,  191,  191,  191, 1081,  773,  774,  790,
      775, 1081,  776,  777,  778,  779,  780,  784,  785,  786,
      781,  782,  783,  787,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  791, 1081,  790,  789,  191,  191,
      788, 1081,  191,  191,  784,  785,  786,  191,  191, 1081,
      787,  191,  191,  191,  191,  191,  191, 1081,  191,  191,

      191,  791,  191,  191,  789,  191,  191,  788,  191,  191,
      191,  191,  191,  191,  191,  191,  792,  793, 1081, 1081,
      191,  191, 1081, 1081,  794,  191,  191, 1081,  191,  191,
      191,  191,  191,  191,  191,  191,  795,  191,  191,  191,
      191,  191,  191,  792,  793,  191,  801,  863,  191,  797,
      191,  794,  798,  799,  191,  191,  796,  191,  191,  191,
      191,  191,  191,  795,  191,  191, 1081,  191,  191,  191,
      191, 1081,  191,  801,  863,  191,  797,  191,  191,  798,
      799,  191,  800,  796,  191,  805, 1081,  191,  802,  191,
      191,  803,  191,  191,  191,  191,  191,  191,  191,  191,

      804,  864,  191, 1081,  865,  191,  866, 1081, 1081,  800,
      191, 1081,  805,  191,  191,  802,  191,  191,  803,  191,
      191,  191,  191,  191,  191,  191,  191,  804,  864,  191,
      810,  865,  806,  866,  191,  807, 1081,  191,  191,  867,
      191,  191, 1081,  191,  191,  808,  191,  812,  191,  191,
      191,  191, 1081,  809,  191,  191,  191,  810,  191,  806,
      811,  191,  807,  191,  191,  191,  867,  191,  191,  814,
      191,  191,  808,  191,  812,  191,  191,  191,  813,  191,
      809,  191,  191,  191,  191,  191, 1081,  811,  815,  868,
      191,  191,  191,  191,  191, 1081,  814,  191,  191,  191,

      191,  191,  191,  191,  191,  813,  191,  191, 1081,  816,
      191,  191,  191,  817,  869,  815,  868,  818,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191, 1081,
      191,  191, 1081,  191,  191,  819,  816,  191,  191,  191,
      817,  869,  191,  191,  818,  191,  191, 1081,  191,  191,
      191,  191,  820,  191,  191,  191,  821,  823,  191,  822,
      191,  191,  819,  191,  191,  191,  191,  191,  824,  191,
      191,  191,  191,  191,  825,  191,  191, 1081, 1081,  820,
      191,  191,  191,  821,  823,  191,  822,  191,  191,  191,
      191,  191,  191,  191,  191,  824,  191,  191,  191,  191,

      191,  825,  191,  191,  826,  828, 1081,  827,  191,  191,
     1081, 1081, 1081,  191,  191,  191,  191,  191,  191,  191,
      191, 1081,  870,  191,  191,  191,  832,  191,  191,  829,
      830,  826,  828,  191,  827,  191,  191,  833,  191,  191,
      191,  831,  191,  834,  191, 1081, 1081,  191,  191,  870,
     1081,  871,  191,  832,  191,  191,  829,  830,  191,  191,
      191,  872,  191,  191,  833,  191,  191,  835,  831,  191,
      834,  191,  191,  838,  191,  191, 1081,  191,  871,  837,
     1081,  191,  836,  839,  873,  191,  191,  191,  872,  191,
      191,  191,  191, 1081,  835,  191,  191,  191,  191,  191,

      838,  191, 1081,  840,  191,  191,  837,  191,  191,  836,
      839,  873, 1081, 1081,  191,  191,  191,  874,  191,  191,
      842,  841,  191,  843,  191,  191,  191, 1081,  191,  191,
      840,  191,  191, 1081,  191,  191, 1081,  844, 1081,  846,
      845,  191,  191,  191,  874,  847,  191,  842,  841,  191,
      843,  191,  191,  191,  849,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  844,  191,  846,  845,  191,  850,
      191,  191,  847,  191,  191,  848,  191,  191,  191,  191,
      191,  849,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  853,  875,  191,  850,  851,  191,  852,

     1081,  191,  848,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  859,  191,  191, 1081,  854,  191,  856,
      853,  875,  191,  191,  851,  876,  852,  855,  191,  857,
      191,  191,  191,  191,  191,  191, 1081,  191,  191,  858,
      859,  191,  191,  191,  854,  191,  856,  191,  860,  877,
      191,  191,  876,  191,  855,  191,  857,  191,  191,  862,
      191,  191,  191,  191,  191,  191,  858,  191,  878,  861,
      191,  191,  191,  191,  191,  860,  877,  879,  191,  191,
      191,  880,  191,  191,  191,  881,  862,  882,  883,  191,
      191,  884,  191,  885,  191,  878,  861,  886,  191,  887,

      191,  888,  889,  890,  879,  891,  191,  892,  880,  191,
      191,  893,  881,  894,  882,  883,  895,  896,  884,  897,
      885,  898,  899,  900,  886,  901,  887,  902,  888,  889,
      890,  903,  891,  904,  892,  905,  906,  907,  893,  908,
      894,  909,  910,  895,  896,  911,  897,  912,  898,  899,
      900,  913,  901,  914,  902,  915,  916,  917,  903,  918,
      904,  191,  905,  906,  907,  191,  908,  191,  909,  910,
      191, 1081,  911,  920,  912,  191,  921, 1081,  913,  975,
      914,  191,  915,  916,  917,  191,  918,  191,  191,  191,
      191,  919,  191,  191,  191,  191,  191,  191,  922,  191,

      920,  191,  191,  921,  924,  976,  975, 1081,  191,  191,
      923,  977,  191,  926,  191,  191,  191,  191,  919,  191,
      191,  191,  191,  191,  191,  922,  191, 1081,  191,  930,
      191,  924,  976,  191,  925,  191,  191,  923,  977,  191,
      926, 1081,  191,  927,  191,  191,  191,  191,  191,  191,
      191,  191, 1081,  978,  929,  928,  930,  191,  191,  191,
      191,  925,  191,  934,  191,  191,  191,  191,  931,  935,
      927,  191,  191,  932,  191, 1081,  191,  191,  191,  191,
      978,  929,  928,  191,  191,  191,  191,  191,  933,  191,
      934,  191,  191,  191,  191,  931,  935,  191,  191,  191,

      932,  939,  936,  191, 1081,  191,  191,  191,  937, 1081,
      191,  191,  938,  191,  191,  933,  191,  191,  191,  940,
      191,  191,  191,  191,  191,  191,  191,  979,  939,  936,
      191,  191,  191,  191,  191,  937,  191,  980,  942,  938,
      191,  191,  191, 1081,  191,  191,  940,  941,  191,  191,
      191,  191,  191,  191,  979,  191,  191,  943,  191,  191,
      191,  191,  981,  191,  980,  942,  191,  191,  191,  191,
      191,  946, 1081, 1081,  941,  191,  944, 1081,  191,  191,
      191,  191,  191,  191,  943,  945,  191,  191,  191,  981,
      191,  191, 1081,  191,  191,  191,  191,  191,  946,  191,

      191,  191,  191,  944,  191,  949,  948, 1081,  191,  947,
      191, 1081,  945,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  949,  948,  950,  191,  947,  191,  191,  191,
      953, 1081,  191,  191,  952, 1081,  191,  191,  191,  191,
      191,  191,  191,  951, 1081,  191,  191,  191,  191,  191,
      191,  950,  191,  956, 1081,  191,  191,  953,  191,  191,
      191,  952,  191,  957,  982, 1081,  191,  191,  191, 1081,
      951,  954,  191,  191,  191,  191,  191,  191,  191,  191,
      956,  955,  191,  960,  191,  191,  191,  191,  191,  191,

      957,  982,  958,  959,  191,  191,  191,  191,  954, 1081,
      191,  191,  983,  984,  191,  191,  191,  191,  955,  191,
      960,  191,  962,  191,  963,  191,  191,  191,  191,  958,
      959,  191,  961,  191,  191, 1081,  969,  191,  191,  983,
      984,  191,  191,  191,  191, 1081, 1081,  191,  191,  962,
      191,  963,  964,  191,  191,  191,  191,  966,  191,  961,
      965,  985,  191,  969,  191,  191,  971,  191,  967,  191,
      191,  191,  191,  968,  191,  191,  191,  191,  973,  964,
      970,  191,  191,  191,  966,  191,  191,  965,  985,  191,
      972,  191,  191,  971,  191,  967,  191,  191,  191,  191,

      968,  191,  191,  191,  191,  973,  974,  970,  191,  191,
      191,  191,  986,  191,  987,  988,  989,  972,  191,  191,
      990,  991,  992,  191,  191,  993,  994,  995,  191,  191,
      191,  191,  996,  974,  997,  998,  999,  191,  191,  986,
     1000,  987,  988,  989, 1001, 1002, 1003,  990,  991,  992,
     1004, 1081,  993,  994,  995, 1005,  191,  191,  191,  996,
      191,  997,  998,  999, 1007,  191,  191, 1000,  191, 1006,
      191, 1001, 1002, 1003,  191,  191,  191, 1004, 1010, 1008,
      191, 1009, 1005,  191,  191,  191,  191,  191,  191,  191,
      191, 1007,  191,  191,  191,  191, 1006,  191, 1011,  191,

      191,  191,  191,  191, 1012, 1010, 1008,  191, 1009,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191, 1014,  191,  191, 1011,  191,  191, 1015, 1013,
      191, 1012,  191,  191,  191, 1081,  191,  191,  191, 1081,
     1081,  191,  191,  191,  191,  191,  191,  191,  191, 1014,
      191,  191,  191,  191,  191, 1015, 1013,  191,  191,  191,
      191,  191,  191, 1016,  191,  191,  191,  191,  191,  191,
      191,  191, 1019, 1017,  191,  191, 1081,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
     1016,  191,  191,  191,  191,  191, 1018,  191, 1081, 1019,

     1017,  191,  191,  191,  191,  191,  191,  191, 1021,  191,
      191,  191,  191,  191,  191,  191, 1023,  191,  191,  191,
      191, 1081, 1022, 1018,  191, 1020,  191,  191, 1081,  191,
      191,  191,  191,  191,  191, 1021,  191, 1024,  191,  191,
      191, 1081,  191, 1023,  191,  191, 1025,  191,  191, 1022,
     1081,  191, 1020,  191,  191, 1026, 1027,  191,  191,  191,
      191,  191,  191,  191, 1024,  191,  191,  191,  191,  191,
     1029,  191,  191, 1025,  191,  191, 1081,  191,  191, 1028,
      191,  191, 1026, 1027,  191, 1035,  191,  191,  191,  191,
     1081,  191,  191,  191,  191,  191, 1030, 1029,  191,  191,

      191,  191,  191, 1031,  191,  191, 1028,  191,  191, 1081,
     1036,  191, 1035,  191,  191,  191, 1081, 1032,  191,  191,
      191,  191,  191, 1030, 1037,  191,  191,  191, 1038,  191,
     1031,  191,  191, 1039,  191,  191,  191, 1036,  191, 1033,
     1040,  191,  191, 1034, 1032, 1041,  191,  191, 1042,  191,
     1043, 1037,  191,  191, 1044, 1038,  191, 1045,  191, 1046,
     1039,  191,  191,  191, 1047,  191, 1033, 1040,  191,  191,
     1034, 1081, 1041,  191,  191, 1042, 1049, 1043,  191, 1048,
      191, 1044,  191,  191, 1045,  191, 1046, 1081,  191,  191,
     1050, 1047,  191,  191,  191,  191,  191, 1081,  191,  191,

      191,  191,  191, 1049,  191,  191, 1048,  191, 1051,  191,
      191, 1081,  191,  191,  191,  191,  191, 1050,  191,  191,
      191,  191,  191, 1081,  191,  191,  191,  191, 1052,  191,
      191,  191, 1054,  191,  191, 1051, 1081,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191, 1056, 1052, 1053,  191,  191, 1054,
      191,  191, 1055,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191, 1056,  191, 1053, 1058,  191, 1057, 1060,  191, 1055,
      191,  191,  191,  191,  191,  191,  191, 1059,  191,  191,

      191, 1061,  191,  191, 1062,  191, 1063,  191,  191,  191,
     1064, 1058, 1065, 1057, 1060,  191, 1066, 1081,  191,  191,
      191,  191, 1073,  191, 1059,  191,  191,  191, 1061,  191,
      191, 1062,  191, 1063,  191,  191,  191, 1064,  191, 1065,
      191,  191, 1067, 1066,  191,  191,  191,  191,  191, 1073,
      191, 1068,  191,  191,  191, 1081,  191,  191,  191,  191,
      191,  191,  191,  191, 1070,  191,  191,  191,  191, 1067,
     1072,  191, 1071,  191,  191, 1069,  191,  191, 1068,  191,
     1074,  191,  191,  191, 1075,  191,  191,  191,  191,  191,
     1076, 1070,  191,  191, 1079,  191,  191, 1072,  191, 1071,

      191, 1081, 1069,  191,  191, 1081,  191, 1074,  191,  191,
      191, 1075,  191,  191, 1077,  191, 1078, 1076,  191,  191,
      191, 1079,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191, 1081,  191, 1081, 1081, 1081,  191, 1080,  191,
     1081, 1077,  191, 1078, 1081,  191, 1081,  191,  191,  191,
      191,  191, 1081,  191, 1081,  191,  191,  191, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1080, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081,  191,  191,  191,   46,   46,
       46,   46,   46,   88, 1081, 1081,   88,   88,  177,  177,
      177, 1081,  177,  179, 1081,  179,  179,  179,  182, 1081,

      182,  182,  182,  191, 1081,  191,  191,  191,    7, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081
    } ;

static const flex_int16_t yy_chk[4377] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1084,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  383,
       23,   30,   24,   21,  272,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   55,   25,
       55,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   27,   25,   28,   25,  186,

       32,   27,  185,   25,   32,   28,   29,   42,   25,   26,
       32,   28,   29,   29,   29,   42,  182,   26,   92,   29,
       26,   91,   27,   26,   28,   88,   26,   32,   27,   26,
       85,   32,   28,   29,   42,   60,   26,   32,   28,   29,
       29,   29,   42,   34,   26,   33,   29,   26,   36,   33,
       26,   43,   43,   26,   35,   33,   26,   34,   59,   36,
       49,   49,   35,   34,   34,   36,   35,   38,   56,   35,
       34,   38,   33,   50,   50,   36,   33,   38,   43,   43,
       52,   35,   33,   41,   34,   41,   36,   51,   41,   35,
       34,   34,   36,   35,   38,   39,   35,   39,   38,   99,

       39,   57,   57,   47,   38,   58,   58,   39,   39,   45,
       41,   20,   41,   86,   86,   41,   90,   90,   67,   70,
      100,   71,   39,   19,   39,   67,   99,   39,  100,   70,
      101,   67,  102,  101,   39,   39,   40,  103,   67,   70,
       40,   71,  106,   40,   40,   67,   70,  100,   71,  106,
       40,  107,   67,   40,   16,  100,   70,  101,   67,  102,
      101,  180,  180,   40,  103,   67,   70,   40,   71,  106,
       40,   40,  184,  184,  113,   77,  106,   40,  107,   11,
       40,   61,   61,   84,   61,   61,   61,   61,   61,   61,
       68,   61,   61,   61,   68,   77,   72,   61,   68,   61,

       72,  113,   77,   84,   68,   61,   72,   61,  109,    7,
       84,   61,   61,  114,   68,  115,   72,   68,  109,  116,
        4,   68,   77,   72,   61,   68,   61,   72,    3,    0,
       84,   68,   61,   72,   61,  109,  112,  112,   61,   61,
      114,   68,  115,   72,    0,  109,  116,   61,   62,   62,
        0,   62,   62,   62,   62,   62,   62,   73,   62,   62,
       62,   73,   76,  112,  112,   62,   76,   73,  104,  104,
       78,  110,  117,   76,   78,  119,  110,   73,  120,   76,
       78,  121,  104,  122,   73,   62,   76,    0,   73,   76,
       78,  123,   62,   76,   73,  104,  104,   78,  110,  117,

       76,   78,  119,  110,   73,  120,   76,   78,  121,  104,
      122,  124,   62,   76,   62,   63,   81,   78,  123,   63,
      125,  126,   63,  127,  128,   81,  127,   81,  129,   63,
       81,  131,   63,  132,    0,  134,   81,   82,  124,   63,
        0,   82,   63,   81,    0,   82,   63,  125,  126,   63,
      127,  128,   81,  127,   81,  129,   63,   81,  131,   63,
      132,   82,  134,   81,   82,  135,   63,   64,   82,  136,
       83,   64,   82,   83,   83,   64,  108,  108,  108,  137,
      108,   64,    0,  138,   64,  138,  140,    0,   82,  141,
       83,   64,  135,    0,   64,  142,  136,   83,   64,    0,

       83,   83,   64,  108,  108,  108,  137,  108,   64,  111,
      138,   64,  138,  140,  111,  143,  141,   83,   64,   65,
      111,  139,  142,  139,  144,  145,   65,  111,   65,    0,
      146,    0,  147,   65,  139,    0,  111,  149,   65,   65,
        0,  111,  143,  150,    0,  151,   65,  111,  139,  152,
      139,  144,  145,   65,  111,   65,  118,  146,  118,  147,
       65,  139,  118,  154,  149,   65,   65,   66,  154,  118,
      150,   66,  151,  118,  155,   66,  152,  156,   66,  157,
        0,   66,  153,  118,   66,  118,  153,   66,    0,  118,
      154,   66,    0,    0,   66,  154,  118,    0,   66,    0,

      118,  155,   66,  159,  156,   66,  157,  133,   66,  153,
      160,   66,    0,  153,   66,  158,  161,  133,   66,   69,
       69,  162,  133,  133,  158,  163,   69,   69,   69,  164,
      159,  165,  158,   69,  133,  166,  163,  160,    0,   69,
        0,  169,  158,  161,  133,  167,   69,   69,  162,  133,
      133,  158,  163,   69,   69,   69,  164,  170,  165,  158,
       69,    0,  166,  163,    0,  167,   69,   74,  169,  171,
      168,   74,  167,  168,  173,  171,  172,  174,  175,  191,
        0,   74,    0,    0,  170,  274,  276,   74,   74,  172,
      277,   74,  167,    0,   74,    0,  171,  168,   74,  191,

      168,  173,  171,  172,  174,  175,  191,  193,   74,  192,
      192,  196,  274,  276,   74,   74,  172,  277,   74,   75,
       75,    0,  193,  199,  196,  279,  191,  193,   75,    0,
      192,  196,   75,    0,  193,   75,  192,  192,  196,   75,
        0,  194,    0,  199,    0,    0,   75,   75,  194,  193,
      199,  196,  279,    0,  193,   75,  194,  192,  196,   75,
      195,  194,   75,  195,  195,  281,   75,   79,  194,   79,
      199,  197,   79,  197,  282,  194,  283,  284,  286,   79,
       79,    0,    0,  194,  195,    0,    0,  195,  194,   79,
      195,  195,  281,  197,   79,    0,   79,    0,  197,   79,

      197,  282,  287,  283,  284,  286,   79,   79,  198,  198,
      198,  195,  200,  209,    0,    0,   79,   80,  201,  200,
      197,   80,  201,  198,   80,   80,  200,  209,  198,  287,
        0,   80,  200,  209,   80,  198,  198,  198,  288,  200,
      209,   80,  201,    0,   80,  201,  200,  203,   80,  201,
      198,   80,   80,  200,  209,  198,  204,  203,   80,  200,
      209,   80,    0,    0,  289,  288,    0,  203,   80,  201,
      202,  204,  206,  207,  203,  290,  204,  202,  202,  202,
      291,  202,  292,  204,  203,  206,  206,  293,  295,  207,
      202,  289,  206,  207,  203,    0,    0,  202,  204,  206,

      207,  208,  290,  204,  202,  202,  202,  291,  202,  292,
      224,  208,  206,  206,  293,  295,  207,  202,  205,  206,
      207,  208,  205,  205,  213,  210,  210,    0,  208,  205,
      224,  213,  211,    0,  211,  296,  205,  224,  208,    0,
      214,  298,  205,    0,  213,  205,  210,  214,  208,  205,
      205,  213,  210,  210,  211,    0,  205,  224,  213,  211,
      214,  211,  296,  205,  299,  215,  216,  214,  298,  205,
      217,  213,    0,  210,  214,  215,  218,    0,  300,  216,
      217,  211,  212,  218,  212,  215,  216,  214,  212,    0,
      217,  299,  215,  216,  301,  212,  218,  217,  219,  212,

      230,    0,  215,  218,  212,  300,  216,  217,  219,  212,
      218,  212,  215,  216,  220,  212,  221,  217,  219,  222,
      230,  301,  212,  218,  220,  219,  212,  230,  222,  226,
      221,  212,  223,  221,  220,  219,  221,    0,  225,  222,
      226,  220,  225,  221,  228,  219,  222,  230,  223,  226,
      229,  220,  223,  228,  229,  222,  226,  221,  225,  223,
      221,  220,    0,  221,  228,  225,  222,  226,  242,  225,
      229,  228,  231,  231,    0,  223,  226,  229,  297,  223,
      228,  229,    0,    0,  302,  225,  227,  227,  242,  241,
      241,  228,  231,  297,    0,  242,  227,  229,  232,  231,

      231,  227,  227,  303,  232,  297,  232,  227,  233,  241,
      233,  302,  233,  227,  227,  242,  241,  241,  232,  231,
      297,  233,  305,  227,    0,  232,    0,  234,  227,  227,
      303,  232,  233,  232,  227,  233,  241,  233,  237,  233,
      234,  235,  236,    0,    0,  232,  306,  234,  233,  305,
      235,  236,  307,  237,  234,  238,  239,    0,  237,  233,
      240,  235,  236,  239,  240,  237,  244,  234,  235,  236,
      238,  243,  243,  306,  234,  238,  239,  235,  236,  307,
      237,  244,  238,  239,  240,  237,  244,  240,  235,  236,
      239,  240,  243,  244,  245,  308,  246,  238,  243,  243,

      246,    0,  238,  239,    0,  247,    0,  245,  244,  247,
      249,  240,  249,  244,  245,  248,  309,  310,  311,  243,
      246,  245,  308,  246,  248,  247,  250,  246,  251,  248,
      249,  251,  247,  250,  245,  248,  247,  249,    0,  249,
        0,  245,  248,  309,  310,  311,  250,  246,  251,    0,
      254,  248,  247,  250,    0,  251,  248,  249,  251,  252,
      250,  252,  248,  254,  253,  255,    0,  258,  252,  255,
      254,  312,    0,  250,  253,  251,  252,  254,    0,  256,
        0,  252,  256,    0,  253,  257,  252,  258,  252,  255,
      254,  253,  255,  257,  258,  252,  255,  254,  312,  259,

      313,  253,  256,  252,  257,  257,  256,  259,  252,  256,
      260,  253,  257,    0,  258,    0,  255,    0,  261,  259,
      257,  260,  261,  263,  263,  314,  259,  313,    0,  256,
      260,  257,  257,  267,  259,  264,  262,  260,  261,  264,
      262,    0,  261,  262,  263,  261,  259,    0,  260,  261,
      263,  263,  314,  267,    0,  264,  262,  260,  268,  266,
      267,  265,  264,  262,    0,  261,  264,  262,  265,  261,
      262,  263,  266,  268,  265,  285,  315,  285,  268,  266,
      267,  265,  264,  262,    0,  268,  266,  269,  265,  316,
      317,  269,  285,  318,  319,  265,  320,  321,  322,  266,

      268,  265,  285,  315,  285,  268,  266,  323,  265,  324,
      325,  269,  326,  327,  269,  329,  316,  317,  269,  285,
      318,  319,  328,  320,  321,  322,  330,  332,  333,  334,
      335,  336,  328,  337,  323,  338,  324,  325,  269,  326,
      327,  339,  329,  340,  341,  343,  344,  345,  346,  328,
      347,  348,  349,  330,  332,  333,  334,  335,  336,  328,
      337,  350,  338,  351,  352,  353,  354,  355,  339,  356,
      340,  341,  343,  344,  345,  346,  357,  347,  348,  349,
      358,  360,  361,  362,  363,  364,  365,  366,  350,  367,
      351,  352,  353,  354,  355,  369,  356,  370,  371,  372,

      371,  373,  374,  357,  375,  376,  370,  358,  360,  361,
      362,  363,  364,  365,  366,  377,  367,  378,  380,  379,
      381,  384,  369,  379,  370,  371,  372,  371,  373,  374,
        0,  375,  376,  370,  385,  386,  387,  389,  493,  391,
        0,  384,  377,    0,  378,  380,  379,  381,  384,  390,
      379,  388,    0,  390,  385,  386,  387,  389,  388,  391,
        0,  385,  386,  387,  389,  493,  391,  392,  384,  494,
      393,  388,  395,  390,  393,  394,  390,  392,  388,  395,
      390,  385,  386,  387,  389,  388,  391,  392,  401,    0,
      393,    0,  395,  394,  392,  394,  494,  393,  388,  395,

      390,  393,  394,  397,  392,  398,  395,  396,  401,  396,
        0,    0,    0,  400,  392,  401,  397,  393,  399,  395,
      394,  398,  394,  397,  396,  398,  399,  404,  400,  396,
      397,    0,  398,  400,  396,  401,  396,  402,  399,  405,
      400,  402,    0,  397,    0,  399,    0,  404,  398,  403,
      397,  396,  398,  399,  404,  400,  396,  408,  407,  405,
      400,  402,  407,  403,  402,  399,  405,  410,  402,  403,
        0,  406,  408,  409,  404,  409,  403,  408,  406,    0,
        0,    0,  407,  495,  408,  407,  405,  410,  402,  407,
      403,  406,  411,  414,  410,  409,  403,  413,  406,  408,

      409,  415,  409,  412,  408,  406,  412,  411,  413,  407,
      495,  417,  411,  414,  410,    0,    0,  413,  406,  411,
      414,  415,  409,  416,  413,    0,  412,  416,  415,    0,
      412,  417,  419,  412,  411,  413,    0,    0,  417,  411,
      414,  418,  420,  418,  413,  423,  419,  416,  415,  420,
      416,  421,  419,  412,  416,  496,  424,  497,  417,  419,
      424,  422,  420,  418,  421,  423,  498,    0,  418,  420,
      418,  421,  423,  419,  416,  422,  420,  425,  421,  419,
      424,  422,  496,  424,  497,  425,  426,  424,  422,  420,
      418,  421,  423,  498,  426,  499,  427,  425,  421,  429,

      501,  505,  422,  427,  425,  431,  426,  424,  422,  431,
        0,  428,  425,  426,  428,  429,  427,  430,    0,  429,
      430,  426,  499,  427,  425,  431,  429,  501,  505,  436,
      427,    0,  431,  426,  428,  432,  431,  430,  428,  434,
      433,  428,  429,  427,  430,  434,  429,  430,  435,  436,
      432,  437,  431,  433,  438,  432,  436,  506,  435,  434,
      433,  428,  432,  439,  430,  507,  434,  433,  435,  442,
      509,  437,  434,  439,  438,  435,  436,  432,  437,  443,
      433,  438,  432,  439,  506,  435,  434,  433,  440,  442,
      439,  444,  507,  441,  443,  435,  442,  509,  437,  443,

      439,  438,  441,  445,  440,    0,  443,  445,  440,    0,
      439,  444,  510,  441,    0,  440,  442,  448,  444,  448,
      441,  443,    0,  445,  446,  446,  443,  451,    0,  441,
      445,  440,  447,  450,  445,  440,  447,  448,  444,  510,
      441,  449,  451,  449,  448,  446,  448,  451,    0,  450,
      445,  446,  446,  450,  451,  452,  447,  453,  454,  447,
      450,  449,    0,  447,  448,  454,  455,  456,  449,  451,
      449,  452,  446,    0,  451,  452,  450,  453,  454,  455,
      450,  456,  452,  447,  453,  454,  455,  456,  449,  457,
      458,  459,  454,  455,  456,  459,    0,  463,  452,  462,

      461,  463,  452,  460,  453,  454,  455,  462,  456,  457,
      458,  461,  460,  455,  456,  459,  457,  458,  459,  462,
      461,  463,  459,  460,  463,  464,  462,  461,  463,  465,
      460,  511,  465,  467,  462,  512,  457,  458,  461,  460,
      464,  469,  459,  470,  466,  464,  462,  461,  463,  465,
      460,  466,  464,  467,  472,  468,  465,    0,  511,  465,
      467,  469,  512,  470,  466,  468,  471,  464,  469,  472,
      470,  466,  464,    0,  472,  468,  465,    0,  466,  473,
      467,  472,  468,  478,  471,  476,  471,  475,  469,  513,
      470,  466,  468,  471,  473,  479,  472,  474,  475,  473,

      476,  472,  468,  478,  474,  476,  473,  475,    0,  477,
      478,  471,  476,  471,  475,  479,  513,  474,  477,  480,
        0,  473,  479,  482,  474,  475,  473,  476,  480,  477,
      478,  474,  476,  482,  475,  482,  477,    0,  481,  480,
        0,  483,  479,  482,  474,  477,  480,  481,  484,  514,
      482,  483,  484,    0,    0,  480,  477,    0,  481,  515,
      482,  483,  482,  516,  485,  481,  480,  486,  483,    0,
      482,  517,  484,  485,  481,  484,  514,  488,  483,  484,
      487,  489,  487,  486,  485,  481,  515,  486,  483,  518,
      516,  485,    0,    0,  486,  488,  489,  488,  517,  484,

      485,  489,  487,  519,  488,  492,  490,  487,  489,  487,
      486,  485,  522,  523,  486,  490,  518,  491,  492,  490,
      491,  524,  488,  489,  488,  492,  490,  525,  489,  487,
      519,  526,  492,  490,  527,  528,  530,  491,  531,  522,
      523,  534,  490,  535,  491,  492,  490,  491,  524,  537,
      540,  541,  492,  490,  525,  542,  543,  544,  526,  547,
      545,  527,  528,  530,  491,  531,  551,  553,  534,  555,
      535,  545,  556,  556,  557,  558,  537,  540,  541,  560,
      561,  562,  542,  543,  544,  563,  547,  545,  564,  566,
      567,  568,  569,  551,  553,  570,  555,  571,  545,  556,

      556,  557,  558,  572,  573,  574,  560,  561,  562,  576,
      577,  578,  563,  579,  582,  564,  566,  567,  568,  569,
      583,  585,  570,  586,  571,  587,  588,  589,  590,  591,
      572,  573,  574,  592,  594,  596,  576,  577,  578,  601,
      579,  582,    0,  602,  599,  600,    0,  583,  585,  605,
      586,    0,  587,  588,  589,  590,  591,  599,  600,  601,
      592,  594,  596,  602,  599,  600,  601,  603,  604,  605,
      602,  599,  600,  606,  607,    0,  605,  604,  607,  608,
      603,    0,  609,  610,  599,  600,  601,  603,  604,    0,
      602,  599,  600,  606,  603,  604,  605,    0,  607,  608,

      606,  607,  609,  610,  604,  607,  608,  603,  611,  609,
      610,  613,  614,  612,  603,  604,  611,  612,    0,    0,
      606,  615,    0,    0,  613,  607,  608,    0,  611,  609,
      610,  613,  614,  612,  617,  611,  615,  619,  613,  614,
      612,  615,  616,  611,  612,  618,  621,  707,  615,  617,
      621,  613,  618,  619,  617,  611,  616,  619,  613,  614,
      612,  617,  616,  615,  619,  618,    0,  620,  615,  616,
      621,    0,  618,  621,  707,  622,  617,  621,  625,  618,
      619,  617,  620,  616,  619,  625,    0,  620,  622,  616,
      626,  623,  618,  623,  620,  622,  624,  621,  625,  627,

      624,  709,  622,    0,  711,  625,  712,    0,    0,  620,
      626,    0,  625,  623,  620,  622,  624,  626,  623,  627,
      623,  628,  622,  624,  629,  625,  627,  624,  709,  630,
      632,  711,  628,  712,  632,  629,    0,  626,  631,  713,
      623,  628,    0,  624,  629,  630,  627,  634,  628,  630,
      635,  629,    0,  631,  632,  638,  630,  632,  631,  628,
      633,  632,  629,  636,  633,  631,  713,  634,  628,  637,
      635,  629,  630,  637,  634,  638,  630,  635,  636,  639,
      631,  632,  638,  636,  633,  631,    0,  633,  640,  714,
      636,  633,  640,  637,  634,    0,  637,  635,  641,  639,

      637,  642,  638,  644,  643,  636,  639,  645,    0,  641,
      636,  633,  640,  643,  715,  640,  714,  646,  641,  640,
      637,  642,  647,  644,  643,  641,  639,  645,  642,    0,
      644,  643,    0,  648,  645,  647,  641,  646,  652,  640,
      643,  715,  647,  649,  646,  641,  650,    0,  642,  647,
      644,  643,  648,  648,  645,  651,  649,  651,  652,  650,
      648,  654,  647,  649,  646,  652,  650,  653,  651,  647,
      649,  655,  656,  650,  653,  651,  658,    0,    0,  648,
      648,  654,  651,  649,  651,  652,  650,  653,  654,  657,
      649,  655,  656,  650,  653,  651,  658,  660,  655,  656,

      659,  653,  651,  658,  657,  661,    0,  659,  654,  657,
        0,    0,    0,  664,  653,  662,  657,  660,  655,  656,
      659,    0,  716,  658,  660,  661,  664,  659,  665,  662,
      662,  657,  661,  664,  659,  662,  657,  666,  663,  666,
      664,  663,  662,  667,  660,    0,    0,  659,  665,  716,
        0,  718,  661,  664,  668,  665,  662,  662,  663,  666,
      664,  719,  662,  667,  666,  663,  666,  668,  663,  669,
      667,  670,  671,  672,  668,  665,    0,  672,  718,  670,
        0,  668,  669,  673,  720,  663,  666,  673,  719,  669,
      667,  670,  671,    0,  668,  674,  669,  672,  670,  671,

      672,  668,    0,  674,  672,  676,  670,  673,  675,  669,
      673,  720,    0,    0,  673,  674,  669,  721,  670,  671,
      676,  675,  674,  677,  672,  676,  677,    0,  675,  678,
      674,  679,  676,    0,  673,  675,    0,  678,    0,  680,
      679,  680,  674,  681,  721,  682,  677,  676,  675,  678,
      677,  679,  676,  677,  684,  675,  678,  686,  679,  685,
      687,  680,  690,  681,  678,  682,  680,  679,  680,  685,
      681,  683,  682,  677,  684,  683,  678,  686,  679,  685,
      687,  684,  690,  688,  686,  689,  685,  687,  680,  690,
      681,  683,  682,  691,  723,  691,  685,  688,  683,  689,

        0,  684,  683,  688,  686,  689,  685,  687,  692,  690,
      688,  693,  689,  697,  695,  691,    0,  692,  683,  694,
      691,  723,  691,  694,  688,  724,  689,  693,  692,  695,
      688,  693,  689,  697,  695,  692,    0,  696,  693,  696,
      697,  695,  691,  694,  692,  698,  694,  699,  698,  725,
      694,  701,  724,  700,  693,  692,  695,  696,  693,  702,
      697,  695,  703,  704,  696,  698,  696,  699,  726,  700,
      694,  701,  698,  700,  699,  698,  725,  727,  701,  702,
      700,  728,  703,  704,  696,  729,  702,  730,  731,  703,
      704,  732,  698,  735,  699,  726,  700,  736,  701,  738,

      700,  740,  743,  744,  727,  745,  702,  746,  728,  703,
      704,  751,  729,  753,  730,  731,  754,  755,  732,  758,
      735,  759,  760,  761,  736,  762,  738,  764,  740,  743,
      744,  765,  745,  766,  746,  767,  768,  769,  751,  770,
      753,  771,  772,  754,  755,  773,  758,  774,  759,  760,
      761,  776,  762,  777,  764,  778,  780,  781,  765,  782,
      766,  784,  767,  768,  769,  785,  770,  787,  771,  772,
      786,    0,  773,  788,  774,  789,  790,    0,  776,  863,
      777,  784,  778,  780,  781,  785,  782,  787,  784,  793,
      786,  786,  785,  788,  787,  789,  790,  786,  791,  791,

      788,  792,  789,  790,  793,  865,  863,    0,  784,  793,
      792,  866,  785,  795,  787,  796,  793,  786,  786,  791,
      788,  792,  789,  790,  794,  791,  791,    0,  792,  800,
      801,  793,  865,  795,  794,  796,  793,  792,  866,  797,
      795,    0,  796,  797,  794,  798,  791,  799,  792,  800,
      801,  794,    0,  867,  799,  798,  800,  801,  803,  797,
      795,  794,  796,  805,  802,  798,  797,  799,  802,  806,
      797,  794,  798,  803,  799,    0,  800,  801,  803,  804,
      867,  799,  798,  805,  802,  803,  797,  807,  804,  806,
      805,  802,  798,  808,  799,  802,  806,  810,  809,  804,

      803,  810,  807,  812,    0,  803,  804,  807,  808,    0,
      805,  802,  809,  808,  807,  804,  806,  810,  809,  811,
      808,  811,  813,  812,  810,  809,  804,  869,  810,  807,
      812,  815,  814,  816,  807,  808,  818,  871,  815,  809,
      808,  811,  813,    0,  810,  809,  811,  814,  811,  813,
      812,  815,  814,  816,  869,  817,  818,  817,  815,  814,
      816,  819,  872,  818,  871,  815,  820,  821,  811,  813,
      822,  823,    0,    0,  814,  817,  819,    0,  815,  814,
      816,  819,  817,  818,  817,  822,  820,  821,  819,  872,
      822,  823,    0,  820,  821,  824,  826,  822,  823,  825,

      827,  828,  817,  819,  829,  830,  825,    0,  819,  824,
      831,    0,  822,  820,  821,  824,  826,  822,  823,  825,
      827,  828,  824,  826,  829,  830,  825,  827,  828,  834,
      831,  829,  830,  825,  832,  835,  824,  831,  832,  836,
      837,    0,  824,  826,  834,    0,  825,  827,  828,  834,
      833,  829,  830,  833,    0,  835,  834,  831,  832,  836,
      837,  832,  835,  840,    0,  832,  836,  837,  838,  841,
      833,  834,  842,  841,  873,    0,  834,  833,  839,    0,
      833,  838,  835,  840,  854,  832,  836,  837,  838,  841,
      840,  839,  842,  845,  845,  838,  841,  833,  839,  842,

      841,  873,  843,  844,  854,  839,  843,  844,  838,    0,
      840,  854,  875,  877,  845,  838,  841,  846,  839,  842,
      845,  845,  847,  847,  848,  839,  843,  844,  848,  843,
      844,  854,  846,  843,  844,    0,  855,  846,  849,  875,
      877,  845,  851,  847,  846,    0,    0,  850,  848,  847,
      847,  848,  849,  843,  844,  848,  855,  851,  849,  846,
      850,  881,  851,  855,  846,  849,  857,  850,  852,  851,
      847,  858,  852,  853,  850,  848,  859,  853,  860,  849,
      856,  856,  860,  855,  851,  849,  857,  850,  881,  851,
      859,  858,  852,  857,  850,  852,  859,  853,  858,  852,

      853,  856,  860,  859,  853,  860,  861,  856,  856,  860,
      861,  862,  883,  857,  884,  890,  891,  859,  858,  852,
      894,  895,  897,  859,  853,  898,  899,  901,  856,  860,
      861,  862,  902,  861,  903,  907,  909,  861,  862,  883,
      910,  884,  890,  891,  911,  912,  917,  894,  895,  897,
      918,    0,  898,  899,  901,  919,  920,  861,  862,  902,
      921,  903,  907,  909,  922,  923,  924,  910,  926,  921,
      927,  911,  912,  917,  925,  919,  920,  918,  927,  923,
      921,  925,  919,  920,  922,  923,  924,  921,  926,  929,
      927,  922,  923,  924,  925,  926,  921,  927,  928,  930,

      928,  925,  919,  920,  929,  927,  923,  921,  925,  929,
      932,  922,  923,  924,  934,  926,  929,  927,  935,  930,
      928,  925,  933,  936,  933,  928,  930,  928,  937,  931,
      932,  929,  931,  938,  934,    0,  929,  932,  935,    0,
        0,  934,  941,  936,  933,  935,  930,  928,  937,  933,
      936,  933,  931,  938,  939,  937,  931,  932,  940,  931,
      938,  934,  941,  939,  942,  935,  943,  944,  945,  941,
      936,  933,  947,  940,  939,  937,    0,  948,  940,  931,
      938,  939,  949,  946,  942,  940,  943,  944,  945,  941,
      939,  942,  947,  943,  944,  945,  946,  948,    0,  947,

      940,  939,  949,  946,  948,  940,  952,  953,  951,  949,
      946,  942,  951,  943,  944,  945,  954,  955,  950,  947,
      956,    0,  953,  946,  948,  950,  952,  953,    0,  949,
      946,  960,  951,  952,  953,  951,  954,  955,  950,  951,
      956,    0,  959,  954,  955,  950,  957,  956,  957,  953,
        0,  960,  950,  952,  953,  958,  959,  958,  960,  951,
      961,  962,  959,  954,  955,  950,  964,  956,  957,  959,
      965,  969,  963,  957,  965,  957,    0,  958,  960,  963,
      961,  962,  958,  959,  958,  980,  964,  961,  962,  959,
        0,  969,  963,  964,  965,  957,  966,  965,  969,  963,

      966,  965,  968,  967,  958,  967,  963,  961,  962,    0,
      981,  970,  980,  964,  971,  972,    0,  968,  969,  963,
      966,  965,  968,  966,  983,  967,  973,  966,  984,  968,
      967,  970,  967,  989,  971,  972,  974,  981,  970,  973,
      991,  971,  972,  974,  968,  992,  973,  966,  995,  968,
      996,  983,  967,  973,  999,  984,  974, 1000,  970, 1001,
      989,  971,  972,  974, 1002, 1005,  973,  991, 1006, 1007,
      974,    0,  992,  973, 1008,  995, 1011,  996, 1009, 1010,
     1011,  999, 1012,  974, 1000, 1005, 1001,    0, 1006, 1007,
     1013, 1002, 1005, 1014, 1008, 1006, 1007,    0, 1009, 1010,

     1011, 1008, 1012, 1011, 1015, 1009, 1010, 1011, 1014, 1012,
     1013,    0, 1005, 1014, 1016, 1006, 1007, 1013, 1017, 1018,
     1014, 1008, 1020,    0, 1015, 1009, 1010, 1011, 1019, 1012,
     1019, 1015, 1022, 1023, 1016, 1014,    0, 1013, 1017, 1018,
     1014, 1016, 1020, 1021, 1024, 1017, 1018, 1025, 1026, 1020,
     1019, 1015, 1022, 1023, 1026, 1019, 1021, 1019, 1027, 1022,
     1023, 1016, 1025, 1021, 1024, 1017, 1018, 1025, 1026, 1020,
     1021, 1024, 1028, 1029, 1025, 1026, 1030, 1019, 1027, 1022,
     1023, 1026, 1031, 1021, 1030, 1027, 1029, 1032, 1033, 1025,
     1021, 1024, 1028, 1029, 1025, 1026, 1030, 1031, 1034, 1028,

     1029, 1036, 1031, 1030, 1039, 1027, 1041, 1032, 1033, 1031,
     1044, 1030, 1045, 1029, 1032, 1033, 1046,    0, 1034, 1028,
     1029, 1048, 1061, 1030, 1031, 1034, 1050, 1049, 1036, 1031,
     1051, 1039, 1053, 1041, 1032, 1033, 1052, 1044, 1055, 1045,
     1056, 1048, 1049, 1046, 1057, 1034, 1050, 1049, 1048, 1061,
     1051, 1052, 1053, 1050, 1049,    0, 1052, 1051, 1055, 1053,
     1056, 1058, 1054, 1052, 1057, 1055, 1059, 1056, 1048, 1049,
     1059, 1057, 1058, 1050, 1049, 1054, 1060, 1051, 1052, 1053,
     1063, 1058, 1054, 1052, 1066, 1055, 1059, 1056, 1058, 1054,
     1067, 1057, 1068, 1059, 1075, 1070, 1060, 1059, 1071, 1058,

     1069,    0, 1054, 1060, 1076,    0, 1072, 1063, 1058, 1054,
     1067, 1066, 1068, 1059, 1069, 1070, 1072, 1067, 1071, 1068,
     1069, 1075, 1070, 1060, 1076, 1071, 1072, 1069, 1077, 1078,
     1080, 1076,    0, 1072,    0,    0,    0, 1067, 1078, 1068,
        0, 1069, 1070, 1072,    0, 1071,    0, 1069, 1077, 1078,
     1080, 1076,    0, 1072,    0, 1077, 1078, 1080,    0,    0,
        0,    0,    0,    0,    0, 1078,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1077, 1078, 1080, 1082, 1082,
     1082, 1082, 1082, 1083,    0,    0, 1083, 1083, 1085, 1085,
     1085,    0, 1085, 1086,    0, 1086, 1086, 1086, 1087,    0,

     1087, 1087, 1087, 1088,    0, 1088, 1088, 1088, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1994 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2008 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include "unistd.h"
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2295 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1082 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1081 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 148:
#line 212 "flex_lexer.l"
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3156 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1082 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1082 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1081);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 242 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

